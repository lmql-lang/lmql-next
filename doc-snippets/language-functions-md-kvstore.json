{"lmql-editor-contents": "# simple kv storage\nstorage = {}\ndef assign(key, value): storage[key] = value; return f'{{{key}: \"{value}\"}}'\ndef get(key): return storage.get(key)\n\nargmax(n=1, openai_chunksize=128, max_len=2048, step_budget=4*2048)\n   \"\"\"In your reasoning you can use actions. You do this as follows:\n   `action_name(<args>) # result: <inserted result>`\n   To remember things, you can use 'assign'/'get':\n   - To remember something:\n   `assign(\"Alice\", \"banana\") # result: \"banana\"`\n   - To retrieve a stored value:\n   `get(\"Alice\") # result: \"banana\"`\n   Always tail calls with \" # result\". Using these actions, let's solve the following question.\n   \n   Q: Alice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a black ball, Bob has a brown ball, and Claire has a blue ball. \\n\\nAs the game progresses, pairs of players trade balls. First, Bob and Claire swap balls. Then, Alice and Bob swap balls. Finally, Claire and Bob swap balls. At the end of the game, what ball does Alice have?\n   A: Let's think step by step.\\n\"\"\"\n   for i in range(32):\n      \"[REASONING]\"\n      if REASONING.endswith(\"# result\"):\n         cmd = REASONING.rsplit(\"`\",1)[-1]\n         cmd = cmd[:-len(\"# result\")]\n         \"{eval(cmd)}`\\n\"\n      else:\n         break\n   \"\"\"Therefore at the end of the game, Alice has the[OBJECT]\"\"\"\n   assert \"blue ball.\" in OBJECT\nfrom \n   \"openai/text-davinci-003\"\nwhere\n   STOPS_AT(REASONING, \"# result\") and STOPS_AT(REASONING, \"Therefore, \") and\n   STOPS_AT(OBJECT, \".\") and STOPS_AT(OBJECT, \",\")", "decoder-graph": "{\"nodes\": [], \"edges\": []}"}